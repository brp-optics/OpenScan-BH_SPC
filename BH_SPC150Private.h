#pragma once

#include <OpenScanDeviceLib.h>

#include <Spcm_def.h>

#include <Windows.h>

// The SPC_data_file_structure.h provided by BH at the time of this writing
// does not compile. We use a fixed copy, generated by the shell script
// fix-spc-data-file-structure-h.sh (which runs in Git Bash).
// In addition, the structs defined in this header are in correct without a
// 1-byte packing.
#pragma pack(push, 1)
#include "SPC_data_file_structure_fixed.h"
#pragma pack(pop)


struct AcqState; // Defined in C++


struct BH_PrivateData
{
	short moduleNr;

	CRITICAL_SECTION rateCountersMutex;
	CONDITION_VARIABLE rateCountersStopCondition;
	bool rateCountersStopRequested;
	bool rateCountersRunning;
	double syncRate;
	double cfdRate;
	double tacRate;
	double adcRate;

	double lineDelayPx;
	char spcFilename[256];

	// C++ data for a single acquisition. Access to this pointer is not
	// protected by a mutex (i.e. relies on synchronization by OpenScanLib and
	// application). Thus, although we create a new AcqState for each
	// acquisition, the old AcqState must only be deallocated in the context
	// of a call from OpenScanLib.
	struct AcqState *acqState;
};


static inline struct BH_PrivateData *GetData(OScDev_Device *device)
{
	return (struct BH_PrivateData *)OScDev_Device_GetImplData(device);
}

OScDev_Error BH_MakeSettings(OScDev_Device *device, OScDev_PtrArray **settings);